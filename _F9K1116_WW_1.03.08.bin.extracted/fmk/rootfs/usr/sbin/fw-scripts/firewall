#!/bin/sh


#-- Internal variables
VER="0.13"
MYNAME="firewall"
SW2=$2
IPTABLES="/usr/sbin/iptables"
CONF_DIR="/tmp"
FW_DIR="/usr/sbin/fw-scripts"

DEBUG="0"

# ------------------------------------------------------------- #
# ------- [ Configuration Settings ] -------------------------- #
# ------------------------------------------------------------- #


. $CONF_DIR/firewall.conf


# ------------------------------------------------------------- #
# --------------- [ Functions Used ] -------------------------- #
# ------------------------------------------------------------- #



# Log function
SYSLOG() {
	if [ "$DEBUG" = "1" ]; then
		echo "[Firewall] $*"
	fi

	}

# Firewall startup
up_firewall() {
###    SYSLOG "initializing $MYNAME $VER"

    #module insert
    #/sbin/insmod ip_conntrack_proto_gre
    #/sbin/insmod ip_conntrack_pptp
    #/sbin/insmod ip_nat_pptp
    #/sbin/insmod ip_nat_proto_gre

###    SYSLOG "Set policy"
    # Reset policy
    $IPTABLES -F
    $IPTABLES -P INPUT DROP
    $IPTABLES -I INPUT -i $LANIF -j ACCEPT
    $IPTABLES -P OUTPUT ACCEPT
#    if [ "$NAT" = "YES" -o "$NAT" = "yes" ]; then
#    	$IPTABLES -P FORWARD DROP
#    else
#    	$IPTABLES -P FORWARD ACCEPT
#    fi
# fix bug 2399
    $IPTABLES -P FORWARD DROP
    if [ "$DISABLE_PT" = "NO" ]; then
  . $CONF_DIR/pt_start
    fi

# Access Control
    if [ "$AC_RULES_ENABLED" = "YES" ]; then
    $IPTABLES -N AC_RULES
    /sbin/insmod ipt_mac.ko
    fi

# Guest Access
#    /sbin/insmod ipt_ip.ko
}


# Disable the firewall.
down() {
    SYSLOG "flushing all rulsets -- firewall disabled"
    $IPTABLES -F
    $IPTABLES -X
#    if [ "$NAT" = "YES" -o "$NAT" = "yes" ]; then
#    	$IPTABLES -F -t nat
#    fi
    $IPTABLES -P INPUT ACCEPT
    $IPTABLES -P FORWARD ACCEPT
    $IPTABLES -P OUTPUT ACCEPT
    if [ "$CLEAN_CONNTRACK" = "YES" ]; then
        $IPTABLES -I FORWARD -i $WANIF -p tcp -j REJECT --reject-with tcp-reset
        /bin/sleep 1
        /bin/echo 1 > /proc/clean_conntrack_table
        /bin/echo clean conntrack > /dev/console
        $IPTABLES -D FORWARD -i $WANIF -p tcp -j REJECT --reject-with tcp-reset
    fi

# keep mac filter
    if [ "$MAC_FILTER_ENABLE" = "YES" ]; then
    echo "Keep MAC Filter"
    . $CONF_DIR/mac
    fi
#  . $CONF_DIR/pt_stop 

# access control
    $IPTABLES -D FORWARD -j AC_RULES
    $IPTABLES -F AC_RULES
    $IPTABLES -X AC_RULES
    /sbin/rmmod ipt_mac

# guest access,clear login info.
#    /sbin/rmmod ipt_ip
    exit 1
}


dump() {
	echo "=======NAT table======"
        if [ "$NAT" = "YES" -o "$NAT" = "yes" ]; then
		$IPTABLES -t nat  -L -n -v
        fi
	echo "=====filter table====="
	$IPTABLES -t filter -L -n -v
	exit 1
}



# ------------------------------------------------------------- #
# --------------- [ Main Procedure ] -------------------------- #
# ------------------------------------------------------------- #

# Parse command line arguments
case "$1" in
    --stop|stop)
        down
        ;;
    --start|start)
        echo -n "Starting firewall"
        up_firewall
        ;;
     -d|-D|--dump|dump)
	dump
	;;
    *)
        up_firewall
        ;;

esac


# ------- [ Set sane kernel configuration ] ------------------- #

SYSLOG "Set kernel configuration"
# Ensure ip-forwarding is disabled at onset
echo 0 > /proc/sys/net/ipv4/ip_forward 

# enlarge the UDP timeout for CDrouter test
#echo 120 > /proc/sys/net/ipv4/netfilter/ip_conntrack_udp_timeout

# Anti-spoofing blocks
for a in /proc/sys/net/ipv4/conf/*/rp_filter;
	do
		echo 1 > $a
	done

# no source routes
for z in /proc/sys/net/ipv4/conf/*/accept_source_route;
  	do
 		echo 0 > $z
   	done

# TCP SYN cookies
#echo 1 > /proc/sys/net/ipv4/tcp_syncookies

# ICMP redirects
for f in /proc/sys/net/ipv4/conf/*/accept_redirects;
 	do
         	echo 0 > $f
done

# icmp broadcasts
echo 1 > /proc/sys/net/ipv4/icmp_echo_ignore_broadcasts



SYSLOG "# ------ [   Creating  Default  Chains   ] ------------------- #"

$IPTABLES -N INPUT_TCP 2> /dev/null
$IPTABLES -N INPUT_UDP  2> /dev/null
$IPTABLES -N FORWARD_TCP 2> /dev/null
$IPTABLES -N FORWARD_UDP 2> /dev/null
$IPTABLES -t nat -N DNS 2> /dev/null
$IPTABLES -N IP_MONITOR_FORWARD 2> /dev/null

$IPTABLES -I INPUT -i $WANIF -p tcp -j INPUT_TCP
$IPTABLES -I INPUT -i $WANIF -p udp -j INPUT_UDP
$IPTABLES -I FORWARD -i $WANIF -p tcp -j FORWARD_TCP
$IPTABLES -I FORWARD -i $WANIF -p udp -j FORWARD_UDP

SYSLOG "# ------ [   Special   Port   Handling   ] ------------------- #"

$IPTABLES -I INPUT_TCP -i $WANIF -m multiport -p tcp --dport 23,80,32764 -j DROP

SYSLOG "# -------- [ ICMP Policy ] ----------------------------------- #"

# Add this rule in order to let ICMP TTL packet(response to traceroute) pass
#$IPTABLES -A OUTPUT -o br0 -p icmp --icmp-type 11 -j ACCEPT

# Add this rule in order to let ICMP related packet pass
$IPTABLES -A OUTPUT -o br0 -p icmp -j ACCEPT
# close netfilter flaw
$IPTABLES -A OUTPUT -m state -p icmp --state INVALID -j DROP

# Add this rule in order to block SSDP on WAN side
$IPTABLES -A OUTPUT -o $WANIF -p udp --dport 1900 --dst 239.255.255.250 -j DROP

SYSLOG "# --------- [ TCPMSS Fix for broken providers ] -------------- #"
$IPTABLES -I FORWARD -p tcp --tcp-flags SYN,RST SYN -j TCPMSS --clamp-mss-to-pmtu


# ------------------------------------------------------------- #
# -------------- [ Modularizd Firewall Rules ] ---------------- #
# ------------------------------------------------------------- #

SYSLOG "# --------- [ NAT ] ------------------------------------------ #"

if [ "$NAT" = "YES" -o "$NAT" = "yes" ]; then
	echo 1 > /proc/sys/net/ipv4/ip_forward
	echo 1 > /proc/sys/net/ipv4/ip_dynaddr
	SYSLOG "$LOCALNET authorized for NAT"
	$IPTABLES -t nat -A POSTROUTING -o $WANIF -j MASQUERADE
	# $IPTABLES -t nat -A POSTROUTING -o ppp1 -j MASQUERADE
	# Add this rule to prevent other user from wan side set gateway to our
	# wan ip and make use of the static route to access our internal device
	# Fix Netgear's BUG 877: if input interface is WAN but the destination
	# ip address is not our external ip, we'll drop it.
#	$IPTABLES -t nat -I PREROUTING -i $WANIF -d ! $EXTERNALIP -j DROP
	#$IPTABLES -t nat -A POSTROUTING -s LOCALNET -o $WANIF -j MASQUERADE
else   # NAT disabled
	echo 1 > /proc/sys/net/ipv4/ip_forward
	SYSLOG "$LOCALNET authorized as subnet"
fi


SYSLOG "# ------ [ DOS & Port Scan ] --------------------------------- #"
if [ "$DOS_ENABLE" = "YES" -o "$DOS_ENABLE" = "yes" ]; then
. $FW_DIR/dos
fi


SYSLOG "# ------ [ VPN Passthrough ] --------------------------------- #"
if [ "$IPSEC_PASS" = "NO" -o "$IPSEC_PASS" = "no" ]; then
#$IPTABLES -I FORWARD -p udp --dport 500 -j DLOG --log-level 4 --log-prefix "[Firewall Log-IPSecPass Fail]"
$IPTABLES -I FORWARD -p udp --dport 500 -j LOG --log-level 4 --log-prefix "[Firewall Log-IPSecPass Fail]"
$IPTABLES -I FORWARD -p udp --dport 500 -j DROP
fi

if [ "$PPTP_PASS" = "NO" -o "$PPTP_PASS" = "no" ]; then
#$IPTABLES -I FORWARD -p tcp --dport 1723 -j DLOG --log-level 4 --log-prefix "[Firewall Log-PptpPass Fail]"
$IPTABLES -I FORWARD -p tcp --dport 1723 -j LOG --log-level 4 --log-prefix "[Firewall Log-PptpPass Fail]"
$IPTABLES -I FORWARD -p tcp --dport 1723 -j DROP
fi

if [ "$L2TP_PASS" = "NO" -o "$L2TP_PASS" = "no" ]; then
#$IPTABLES -I FORWARD -p udp --dport 1701 -j DLOG --log-level 4 --log-prefix "[Firewall Log-L2tpPass Fail]"
$IPTABLES -I FORWARD -p udp --dport 1701 -j LOG --log-level 4 --log-prefix "[Firewall Log-L2tpPass Fail]"
$IPTABLES -I FORWARD -p udp --dport 1701 -j DROP
fi



SYSLOG "# ------ [ Content Filters ] --------------------------------- #"
if [ "$CHECK_URL" = "YES" -o "$CHECK_URL" = "yes" ]; then
. $FW_DIR/cfilter
fi


SYSLOG "#------ [ Response to Ping ] ----------------------------------#"
if [ "$RESPONSE_PING" = "YES" ]; then
. $FW_DIR/rping
fi

SYSLOG "#------ [ Remote Control ] ------------------------------------#"
if [ "$REMOTE_CONTROL" = "YES" ]; then
. $FW_DIR/rcontrol
fi

SYSLOG "# ------ [ Applying Rules ] -----------------------------------#"
. $CONF_DIR/rules

SYSLOG "# ------ [ Applying Policy ] -----------------------------------#"
. $CONF_DIR/policy

SYSLOG "# ------ [ MAC Filter ] -----------------------------------#"
if [ "$MAC_FILTER_ENABLE" = "YES" ]; then
. $CONF_DIR/mac
fi

#SYSLOG "# ------ [ Applications   ] -----------------------------------#"
#. $FW_DIR/algs


SYSLOG "# ------ [ DMZ'd machines ] -----------------------------------#"
if [ "$NAT" = "YES" -o "$NAT" = "yes" ]; then
	if [ "$HAVE_DMZ" = "YES" -o "$HAVE_DMZ" = "yes" ]; then
		. $FW_DIR/dmz
	fi
fi

SYSLOG "# ------ [ DMZ'd machines ] -----------------------------------#"
if [ "$NAT" = "YES" -o "$NAT" = "yes" ]; then
	if [ "$HAVE_DMZ2" = "YES" -o "$HAVE_DMZ2" = "yes" ]; then
		. $FW_DIR/dmz2
	fi
fi

$IPTABLES -A INPUT_TCP -p tcp -j RETURN
$IPTABLES -A INPUT_UDP -p udp -j RETURN
$IPTABLES -A FORWARD_TCP -p tcp -j RETURN
$IPTABLES -A FORWARD_UDP -p udp -j RETURN

SYSLOG "# ------ [ Statefull connection tracking ] ------------------- #"

#$IPTABLES -I INPUT -m state --state INVALID -j DROP
$IPTABLES -I INPUT -m state --state ESTABLISHED,RELATED -j ACCEPT
$IPTABLES -I INPUT -m state --state NEW ! -i  $WANIF -p tcp ! --syn -j DROP
$IPTABLES -A INPUT -m state --state NEW ! -i  $WANIF -j ACCEPT
#IP socket between processes will go OUTPUT then loop back to INPUT
#$IPTABLES -A INPUT -m state --state NEW -i lo -j ACCEPT

#Ron add for SNMP
#$IPTABLES -I INPUT -p udp --dport 161 -i ! $WANIF -j DROP
#$IPTABLES -I INPUT -p udp --dport 161 -i $WANIF -j ACCEPT

#$IPTABLES -I FORWARD -m state --state INVALID -j DROP
$IPTABLES -I FORWARD 3 -m state --state ESTABLISHED,RELATED -j IP_MONITOR_FORWARD
#decrease protect from LAN side
#$IPTABLES -I FORWARD -m state --state NEW -i ! $WANIF -p tcp ! --syn -j DROP
$IPTABLES -A FORWARD -m state --state NEW ! -i  $WANIF -j IP_MONITOR_FORWARD

SYSLOG "# ------ [   guest access control: please adjust port here to fit you guest access SPEC] ------------------- #"
$IPTABLES -I INPUT -i $LANIF -m multiport -p tcp --dport 80,10101 -m mark --mark 1 -j DROP
# For bug guest ACL not work when guess access enabled. Boone
if [ "$GUEST_ACCESS" = "YES" ]; then
if [ "$GUEST_CAFE_STYLE" = "YES" ]; then
$IPTABLES -I INPUT -i $LAN_GUEST_IF -p tcp --dport 80 --tcp-flag ALL PSH,ACK -m user --invert 1 -j REJECT --reject-with http-reset
else
$IPTABLES -I INPUT -i $LAN_GUEST_IF -p tcp --dport 80 --tcp-flag ALL PSH,ACK -m user -j REJECT --reject-with http-reset
fi
if [ "$AC_RULES_ENABLED" = "YES" ]; then
$IPTABLES -I INPUT -i $LAN_GUEST_IF -p tcp --dport 80 --tcp-flag ALL PSH,ACK -m http_string --file $AC_URLKW_FILTER -j ACCEPT
fi
fi

# some fixes for static routing in local lan
$IPTABLES -A FORWARD -i $LANIF -o $LANIF -j IP_MONITOR_FORWARD

# miniupnpd
if [ "$UPNP_ENABLE" = "YES" ]; then
	$IPTABLES -I FORWARD -j MINIUPNPD
	$IPTABLES -t nat -I PREROUTING -i $WANIF -j MINIUPNPD
fi

if [ -f $CONF_DIR/http_block ]; then
. $CONF_DIR/http_block
fi

$IPTABLES -N IP_MONITOR_FORWARD_IN
$IPTABLES -N IP_MONITOR_FORWARD_IN_GW
$IPTABLES -N IP_MONITOR_FORWARD_OUT
$IPTABLES -N IP_MONITOR_FORWARD_PC_ALL

$IPTABLES -A IP_MONITOR_FORWARD_IN_GW -j RETURN

if [ "$WAN_MODE_ETHER" = "YES" ]; then
if [ "$GW_MAC" != "" ]; then
	$IPTABLES -A IP_MONITOR_FORWARD_IN -m mac --mac-source $GW_MAC -j IP_MONITOR_FORWARD_IN_GW
fi
else
	$IPTABLES -A IP_MONITOR_FORWARD_IN -j IP_MONITOR_FORWARD_IN_GW
fi


$IPTABLES -A IP_MONITOR_FORWARD_IN -j RETURN
$IPTABLES -A IP_MONITOR_FORWARD_OUT -j RETURN

$IPTABLES -A IP_MONITOR_FORWARD -i $WANIF -j IP_MONITOR_FORWARD_IN
$IPTABLES -A IP_MONITOR_FORWARD -o $WANIF -j IP_MONITOR_FORWARD_OUT
$IPTABLES -A IP_MONITOR_FORWARD -j IP_MONITOR_FORWARD_PC_ALL

#. /tmp/ip_monitor_pcs
$IPTABLES -A IP_MONITOR_FORWARD -j ACCEPT

# for igmp proxy
$IPTABLES -I INPUT -p 2 -j ACCEPT

$IPTABLES -D INPUT -i $LANIF -j ACCEPT

# Access Control
if [ "$AC_RULES_ENABLED" = "YES" ]; then
$IPTABLES -I FORWARD -j AC_RULES
fi
